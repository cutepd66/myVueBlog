export default [{
        id: '1',
        title: 'web标准的简单介绍',
        author: 'cutepd66',
        publishTime: '2021-1-30',
        views: 6,
        content: {
            "desc": '在介绍web标准之前，我们需要知道一个东西，那就是浏览器内核。常用的浏览器内核有以下几种，Trident(IE内核)，代表：IE、傲游、猎豹安全浏览器、360极速浏览器等等，Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML；Gecko(firefox)，火狐浏览器采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能；webkit(Safari)， Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit；Chromium/Blink(chrome) , 在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支，大部分国产浏览器最新版都采用Blink内核的二次开发。',
            "ppp1": '在介绍web标准之前，我们需要知道一个东西，那就是浏览器内核。',
            "hhh1": '浏览器内核',
            "ppp2": '常用的浏览器内核有以下几种，Trident(IE内核)，代表：IE、傲游、猎豹安全浏览器、360极速浏览器等等，Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML；Gecko(firefox)，火狐浏览器采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能；webkit(Safari)， Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit；Chromium/Blink(chrome) ， 在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支，大部分国产浏览器最新版都采用Blink内核的二次开发。',
            "ppp3": '不同浏览器使用内核不同，对于网页的语法的解析也会有不同，所以渲染出来的结果也会有些许的不同，显示出来就会有些许不同了。',
            "hhh2": 'web标准',
            "ppp4": '通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别，所以也就出现了web标准。',
            "iii1": require('../assets/bz.png'),
            "ppp5": 'web标准的构成，Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。',
            "iii2": require('../assets/gx.png'),
            "ppp6": '结构标准：结构用于对网页元素进行整理和分类，主要是HTML。 最重要表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。行为标准：行为是指网页模型的定义及交互的编写，主要是 Javascript。',
            "ppp7": '理想状态我们的源码： .html    .css   .js 。',
        },
        liuyan: [{
            nick: '可爱的胖丁',
            content: '站长牛逼，站长威武！'
        }]
    },
    {
        id: '2',
        title: '原生ajax、jq中的ajax的基本使用',
        author: 'cutepd66',
        publishTime: '2021-1-30',
        views: 16,
        content: {
            "desc": 'ajax是浏览器提供的一套方法，相当于浏览器发送请求与接收响应的代理人，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。发送原生ajax请求有两种方式，一种是通过监听ajax对象的onload事件，一种是通过监听onreadystatechange事件，其原理是在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码，通过xhr.readyState 得到。',
            "hhh1": 'ajax概述',
            "ppp1": 'ajax是浏览器提供的一套方法，相当于浏览器发送请求与接收响应的代理人，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。',
            "iii1": require('../assets/ajax0.png'),
            "hhh2": '原生ajax实现步骤',
            "ppp2": '发送原生ajax请求有两种方式，一种是通过监听ajax对象的onload事件，一种是通过监听onreadystatechange事件，其原理是在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码，通过xhr.readyState 得到。',
            "hhh3": '第一种方式',
            "ppp3": '发送get请求不携带参数',
            "iii2": require('../assets/ajax1.png'),
            "ppp4": '发送get请求携带参数,参数的格式是name=zhangsan&age=18这种格式的，并且是放到url种发送',
            "iii3": require('../assets/ajax2.png'),
            "ppp5": '发送post请求,普通数据格式,参数需要放到请求体中传输，并且需要设置Content-type为application/x-www-form-urlencoded',
            "iii4": require('../assets/ajax3.png'),
            "ppp6": '发送post请求，json格式数据,需要将Content-type设置为application/json',
            "iii5": require('../assets/ajax4.png'),
            "hhh5": '第二种方式',
            "ppp7": '这种方式比较老，兼容id浏览器,',
            "iii6": require('../assets/ajax5.png'),
            "hhh6": 'jq中发送ajax请求',
            "ppp8": '发送get请求，参数需要写到data属性中,$.ajax方法内部会自动将数据转为name=lisi&age=18这种格式',
            "iii7": require('../assets/ajax6.png'),
            "ppp9": '发送post请求,json格式数据,需要将参数格式设置为application/json',
            "iii8": require('../assets/ajax7.png')
        },
        liuyan: [{
            nick: '可爱的胖丁',
            content: '站长牛逼，站长威武！'
        }]
    },
    {
        id: '3',
        title: 'axios的基本使用',
        author: 'cutepd66',
        publishTime: '2021-1-30',
        views: 66,
        content: {
            "desc": 'axios概述 首先需要知道：axios不是一种新的技术。axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，有以下特点:基于promise用于浏览器和node.js的http客户端、支持浏览器和node.js、支持promise、能拦截请求和响应、自动转换JSON数据等等。支持的浏览器有:',
            "hhh1": 'axios概述',
            "ppp1": '首先需要知道：axios不是一种新的技术。axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，有以下特点:基于promise用于浏览器和node.js的http客户端、支持浏览器和node.js、支持promise、能拦截请求和响应、自动转换JSON数据等等。支持的浏览器有:',
            "ppp66": 'axios中文网:http://www.axios-js.com',
            "pppa": 'axios的github仓库:https://github.com/axios/axios',
            "iii1": require('../assets/axios0.png'),
            "hhh2": 'axios的基础用法',
            "ppp2": 'get和 delete请求传递参数:通过传统的url以 ? 的形式传递参数、restful 形式传递参数 、通过params  形式传递参数 。',
            "ppp3": 'post  和 put  请求传递参数:通过选项传递参数、通过 URLSearchParams  传递参数。',
            "ppp4": '在使用axios之前，需要下载axios包，通过script标签引入或webpack项目中通过npm下包并引入。',
            "ppp5": 'get请求，通过params形式传参:',
            "iii2": require('../assets/axios1.png'),
            "ppp6": 'delete请求，通过params传参:',
            "iii3": require('../assets/axios2.png'),
            "ppp7": 'post请求，通过选项传递参数:',
            "iii4": require('../assets/axios3.png'),
            "ppp8": 'put请求，通过选项传递参数',
            "iii5": require('../assets/axios4.png'),
            "ppp9": '通过 URLSearchParams  传递参数',
            "iii6": require('../assets/axios5.png'),
            "ppp10": '当然，也可以使用async/await来发送axios请求。'
        },
        liuyan: [{
            nick: '可爱的胖丁',
            content: '站长牛逼，站长威武！'
        }]
    },
    {
        id: '4',
        title: 'git的基本使用',
        author: 'cutepd66',
        publishTime: '2021-1-30',
        views: 26,
        content: {
            "desc": 'Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。git的安装 下载地址:https://git-scm.com，安装过程中点默认即可。',
            "hhh1": 'git是什么',
            "ppp1": 'Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。',
            "hhh2": 'git的安装',
            "ppp2": '下载地址:https://git-scm.com，安装过程中点默认即可。',
            "hhh3": 'git基本工作流程',
            "ppp110": '所有需要被管理的文件，需要提交到暂存区，然后才能提交到本地仓库。',
            "iii1": require('../assets/git1.png'),
            "hhh4": 'git的使用',
            "ppp3": '在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。',
            "ppp4": '1、配置提交人姓名：git config --global user.name 提交人姓名',
            "ppp5": '2、配置提交人姓名：git config --global user.email 提交人邮箱',
            "ppp6": '3、查看git配置信息：git config --list',
            "ppp7": '注意',
            "ppp8": '如果要对配置信息进行修改，重复上述命令即可。配置只需要执行一次。',
            "hhh5": 'git的提交步骤',
            "ppp10": '1、git init 初始化git仓库',
            "ppp11": '2、git status 查看文件状态,红色表示没有提交到暂存区，绿色表示已经提交到暂存区了。',
            "ppp12": '首先，我们可以在项目根目录下，按shift+右键，在弹出的菜单点击 在此处打开Powershell窗口,可以在Powershell窗口中输入命令执行。 ',
            "iii2": require('../assets/git2.png'),
            "iii3": require('../assets/git3.png'),
            "ppp13": '3、git add 文件列表将文件添加到暂存区，文件颜色显示为绿色,之后才能git commit提交到本地仓库',
            "ppp14": '4、git commit -m 提交信息 向仓库中提交代码',
            "ppp15": '5、git log 查看提交记录',
            "iii4": require('../assets/git4.png'),
            "hhh6": '撤销',
            "ppp16": '用暂存区中的文件覆盖工作目录中的文件： git checkout 文件',
            "ppp17": '将文件从暂存区中删除： git rm --cached 文件',
            "ppp18": '将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：git rest --hard commitID',
            "iii5": require('../assets/git5.png')
        },
        liuyan: [{
            nick: '可爱的胖丁',
            content: '站长牛逼，站长威武！'
        }]
    },
    {
        id: '5',
        title: 'github基本使用',
        author: 'cutepd66',
        publishTime: '2021-1-30',
        views: 36,
        content: {
            "desc": '首先，需要在github上注册一个账号，这里就不再多述 多人协作开发流程 1、A在自己的计算机中创建本地仓库 2、A在github中创建远程仓库 3、A将本地仓库推送到远程仓库 4、B克隆远程仓库到本地进行开发 5、B将本地仓库中开发的内容推送到远程仓库 6、A将远程仓库中的最新内容拉去到本地',
            "ppp1": '首先，需要在github上注册一个账号，这里就不再多述',
            "hhh1": '多人协作开发流程',
            "ppp2": '1、A在自己的计算机中创建本地仓库',
            "ppp3": '2、A在github中创建远程仓库',
            "ppp4": '3、A将本地仓库推送到远程仓库',
            "ppp5": '4、B克隆远程仓库到本地进行开发',
            "ppp6": '5、B将本地仓库中开发的内容推送到远程仓库',
            "ppp7": '6、A将远程仓库中的最新内容拉去到本地',
            "iii1": require('../assets/github1.png'),
            "iii2": require('../assets/github2.png'),
            "hhh2": '创建仓库',
            "ppp8": '1、创建仓库时，可以只添加仓库名即可，其他可以先不填写',
            "iii3": require('../assets/github4.png'),
            "ppp9": '2、复制刚刚创建的远程仓库的地址，以便后面将本地仓库推送到这个远程仓库',
            "iii4": require('../assets/github5.png'),
            "ppp10": '3、git push 远程仓库地址 分支名称,git push https://github.com/cutepd66/git-test.git master ,将本地仓库的master分支推送到远程仓库,执行命令后会弹出github的登录窗口， 第一次需要输入用户名和密码 ',
            "ppp11": '4、git remote add 远程仓库地址别名 远程仓库地址,git remote add origin https://github.com/cutepd66/git-test.git,为远程仓库起别名，一般别名是origin，以后可以使用git push origin 分支名称来 将本地仓库推送到远程仓库',
            "ppp12": '5、git push 远程仓库地址别名 分支名称，git push origin master，将本地master分支推送到远程仓库',
            "ppp13": '6、git push -u 远程仓库地址别名 分支名称，git push -u origin master ，-u 记住推送地址及分支，下次推送只需要输入git push即可',
            "hhh3": '克隆仓库',
            "ppp14": '克隆远端数据仓库到本地：git clone 仓库地址，git clone https://github.com/cutepd66/gitdemo-test.git',
            "hhh4": '拉取远程仓库中最新的版本',
            "ppp15": '拉取远程仓库中最新的版本：git pull 远程仓库地址 分支名称,如果有别名，也可以使用别名，而不必是地址',
            "ppp16": '两点说明：clone和pull的区别，clone是第一次克隆时候用到的，后面就不需要了',
            "ppp17": '如果本地仓库中的版本比远程仓库的版本低，那本地仓库中的是不能推送到远程仓库的，需要将最新的远程仓库拉去到本地，然后在此基础上才能推送'
        },
        liuyan: [{
            nick: '可爱的胖丁',
            content: '站长牛逼，站长威武！'
        }]
    },
    {
        id: '6',
        title: '如何用nodejs做一个最简单的web服务器',
        author: 'cutepd66',
        publishTime: '2021-1-30',
        views: 12,
        content: {
            "ppp1": '本文将介绍如何用nodejs做一个最简单的web服务器，两种方法，一种是使用原生的node，一种是使用express。前端是安装有node和express。',
            "hhh1": '原生node做一个最简单的web服务器',
            "ppp2": '首先，引入http模块,使用http的createServe方法创建一个网站服务器;app.on侦听所有客户端的请求，其第二个参数是一个箭头函数，req有请求的相关信息，res有响应的相关信息；res.writeHead设置响应状态码和返回的类型，这里设为text/html，如果返回的内容中有中文,需要设置字符集，否则客户端收到显示时将是乱码，设置为utf8；res.end结束本次请求并响应内容回客户端。app.listen是侦听来自3000端口的请求（我们现在是一台电脑既做客户端也做服务器,网站服务器使用3000来侦听来自客户端的请求。',
            "ppp3": '代码:',
            "iii1": require('../assets/node1.png'),
            "ppp4": '我们在终端中允许该app.js文件',
            "iii2": require('../assets/node2.png'),
            "ppp5": '客户端访问如图:',
            "iii3": require('../assets/node3.png'),
            "hhh2": 'express做一个最简单的web服务器',
            "ppp6": '引入express，使用express()创建网站服务器，app.get是侦听来自客户端的get请求，res.send是响应客户端并结束本次请求。send方法的好处有，方法内部会检测响应内容的类型，会自动设置http状态码，会帮我们自动设置响应的内容类型及编码。',
            "iii4": require('../assets/node4.png'),
            "ppp7": '效果图：',
            "iii5": require('../assets/node5.png')
        },
        liuyan: [{
            nick: '可爱的胖丁',
            content: '站长牛逼，站长威武！'
        }]
    }
]